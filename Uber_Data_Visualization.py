# -*- coding: utf-8 -*-
"""ml_proj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yiKaucQM3v3OlHA0OoSJhYu1G2zu2r20
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
from sklearn import metrics
from sklearn.metrics import r2_score

df = pd.read_excel('/content/drive/My Drive/uber.xlsx')
df

df.isnull().sum()

df.fillna(df.mean(),inplace = True)

df.isnull().sum()

plt.rcParams['figure.figsize']=(30,15)

df.hist()

from sklearn.preprocessing import StandardScaler

standardScalar = StandardScaler()

df.head(2)

column_to_scale = ['Daily Mean Travel Time (Seconds)', 'AM Mean Travel Time (Seconds)', 'PM Mean Travel Time (Seconds)','Midday Mean Travel Time (Seconds)','Evening Mean Travel Time (Seconds)','Early Morning Mean Travel Time (Seconds)']

df[column_to_scale] = standardScalar.fit_transform(df[column_to_scale])

X=df[['AM Mean Travel Time (Seconds)', 'PM Mean Travel Time (Seconds)','Midday Mean Travel Time (Seconds)','Evening Mean Travel Time (Seconds)','Early Morning Mean Travel Time (Seconds)']].values
y=df['Daily Mean Travel Time (Seconds)'].values

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=1)

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train,y_train)

y_pred = model.predict(X_test)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df1 = df.head(25)
df1

model.coef_

model.intercept_

model.score(X,y)

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

score=r2_score(y_test,y_pred)*100
score

fig, ax = plt.subplots()
ax.scatter(y_test, y_pred)
ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=4)
ax.set_xlabel('measured')
ax.set_ylabel('predicted')
plt.show()

